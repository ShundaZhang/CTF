n = 0xb8cb1cca99b6ac41876c18845732a5cbfc875df346ee9002ce608508b5fcf6b60a5ac7722a2d64ef74e1443a338e70a73e63a303f3ac9adf198595699f6e9f30c009d219c7d98c4ec84203610834029c79567efc08f66b4bc3f564bfb571546a06b7e48fb35bb9ccea9a2cd44349f829242078dfa64d525927bfd55d099c024f
p_fake0 = 0xe700568ff506bd5892af92592125e06cbe9bd45dfeafe931a333c13463023d4f0000000000000000000000000000000000000000000000000000000000000000
p_fake1 = 0xe700568ff506bd5892af92592125e06cbe9bd45dfeafe931a333c13463023d4fffffffff00000000000000000000000000000000000000000000000000000000
 
#n = 0x5894f869d1aecee379e2cb60ff7314d18dbd383e0c9f32e7f7b4dc8bd47535d4f3512ce6a23b0251049346fede745d116ba8d27bcc4d7c18cfbd86c7d065841788fcd600d5b3ac5f6bb1e111f265994e550369ddd86e20f615606bf21169636d153b6dfee4472b5a3cb111d0779d02d9861cc724d389eb2c07a71a7b3941da7dL
#p_fake = 0x5d33504b4e3bd2ffb628b5c447c4a7152a9f37dc4bcc8f376f64000fa96eb97c0af445e3b2c03926a4aa4542918c601000000000000000000000000000000000

PR.<x> = PolynomialRing(Zmod(n))
for p_fake in range(p_fake0,p_fake1,1):
	pbits = 512
	kbits = 256 - 32
	#kbits = 128
	pbar = p_fake & (2^pbits-2^kbits)
	#print("upper %d bits (of %d bits) is given" % (pbits-kbits, pbits))
 
	f = x + pbar
	 
	x0 = f.small_roots(X=2^kbits, beta=0.4)  # find root < 2^kbits with factor >= n^0.3
	if x0:
		print(x0)
		print(pbar)
		break
