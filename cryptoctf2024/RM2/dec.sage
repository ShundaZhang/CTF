from pwn import *
import gmpy2
from Crypto.Util.number import *


'''
p = 165674320538257119618935777569264633493104025830012248611472894731246968925696662635145647004418760425271620056052110213831898075813625940406354655699229763954183325349451697961823730258851477789232732720256524106366149483534442882933118436805397696618238112020186478083571097834483155523153453888627684702401
p - 1 = 165674320538257119618935777569264633493104025830012248611472894731246968925696662635145647004418760425271620056052110213831898075813625940406354655699229763954183325349451697961823730258851477789232732720256524106366149483534442882933118436805397696618238112020186478083571097834483155523153453888627684702400
2*p + 1 = 331348641076514239237871555138529266986208051660024497222945789462493937851393325270291294008837520850543240112104220427663796151627251880812709311398459527908366650698903395923647460517702955578465465440513048212732298967068885765866236873610795393236476224040372956167142195668966311046306907777255369404803

p = 136319579751776446060762594173031311688966678940151526541501511333981751346927563082795749698154881610675192169672633902518187425468160661847068557813564166633080060747936338201910247175316115399953152558661099756476138183615339201940322678359899950385796675849521347379659664940470524326676056070490217094401
p - 1 = 136319579751776446060762594173031311688966678940151526541501511333981751346927563082795749698154881610675192169672633902518187425468160661847068557813564166633080060747936338201910247175316115399953152558661099756476138183615339201940322678359899950385796675849521347379659664940470524326676056070490217094400
2*p + 1 = 272639159503552892121525188346062623377933357880303053083003022667963502693855126165591499396309763221350384339345267805036374850936321323694137115627128333266160121495872676403820494350632230799906305117322199512952276367230678403880645356719799900771593351699042694759319329880941048653352112140980434188803

p = 167066497257440978316437383703759885883710399607464970507226666751148377601072192345678453127627017444715112573328815034091855768788191234070292236897489706711377800313782282510955348742479435017595806273698822210344965739577521983849135148941908318872721987147689750637963733990395783258274263553418422083201
p - 1 = 167066497257440978316437383703759885883710399607464970507226666751148377601072192345678453127627017444715112573328815034091855768788191234070292236897489706711377800313782282510955348742479435017595806273698822210344965739577521983849135148941908318872721987147689750637963733990395783258274263553418422083200
2*p + 1 = 334132994514881956632874767407519771767420799214929941014453333502296755202144384691356906255254034889430225146657630068183711537576382468140584473794979413422755600627564565021910697484958870035191612547397644420689931479155043967698270297883816637745443974295379501275927467980791566516548527106836844166403

'''

def phif(pr):
    mp = defaultdict(lambda: 0)
    for pp in pr:
        mp[pp] += 1
    ph = 1
    for k, v in mp.items():
        ph *= (k - 1) * k ** (v - 1)
    return ph


e = 65537

p = 136319579751776446060762594173031311688966678940151526541501511333981751346927563082795749698154881610675192169672633902518187425468160661847068557813564166633080060747936338201910247175316115399953152558661099756476138183615339201940322678359899950385796675849521347379659664940470524326676056070490217094401

q = 165674320538257119618935777569264633493104025830012248611472894731246968925696662635145647004418760425271620056052110213831898075813625940406354655699229763954183325349451697961823730258851477789232732720256524106366149483534442882933118436805397696618238112020186478083571097834483155523153453888627684702401

p1 = 136319579751776446060762594173031311688966678940151526541501511333981751346927563082795749698154881610675192169672633902518187425468160661847068557813564166633080060747936338201910247175316115399953152558661099756476138183615339201940322678359899950385796675849521347379659664940470524326676056070490217094400

#factordb

phi1 =  [2]*8 + [3] + [5]*2 + [7] + [11] + [13] + [17] + [41] + [73] + [101] + [113] + [401] + [1321] + [4481] + [12401] + [36913] + [46861] + [54497] + [204311] + [261071] + [8652401] + [24999521] + [1357901521] + [3961916417] + [29040743441] + [41589844801] + [17122630828217] + [45459230802631] + [4602336982581694499761] + [25659752338627001628771761] + [59522626340600884948348798081] + [133240651584560734013410462245281] + [214523217697063175741941761486481] + [375423311348937549351028930453201]

q1 = 165674320538257119618935777569264633493104025830012248611472894731246968925696662635145647004418760425271620056052110213831898075813625940406354655699229763954183325349451697961823730258851477789232732720256524106366149483534442882933118436805397696618238112020186478083571097834483155523153453888627684702400

phi2 = [2]*6 + [3] + [5]*2 + [7] + [11] + [13] + [19] + [23] + [31] + [37] + [61] + [71] + [181] + [229] + [233] + [241] + [401] + [433] + [1021] + [1033] + [5237] + [15601] + [15881] + [77621] + [101701] + [136531] + [600241] + [675889] + [39785017] + [18590197861] + [2110175168929] + [62270035466201] + [708791106674191] + [3388917958905421] + [297934315348629678161] + [343722324162224502721] + [4258346124311062016361408601] + [196833670484920623077625618471272401] + [3277953273564812642861575873943801232248811019050895081]

p2 = 272639159503552892121525188346062623377933357880303053083003022667963502693855126165591499396309763221350384339345267805036374850936321323694137115627128333266160121495872676403820494350632230799906305117322199512952276367230678403880645356719799900771593351699042694759319329880941048653352112140980434188803

phi3 = [3]*81 + [2357]*80

q2 = 331348641076514239237871555138529266986208051660024497222945789462493937851393325270291294008837520850543240112104220427663796151627251880812709311398459527908366650698903395923647460517702955578465465440513048212732298967068885765866236873610795393236476224040372956167142195668966311046306907777255369404803

phi4 = [3]*241 + [41]*120

phi_m1 = phi1+phi2
phi = phif(phi_m1)
d1 = gmpy2.invert(e, phi)
print(d1)

phi_m2 = phi3+phi4
phi = phif(phi_m2)
d2 = gmpy2.invert(e, phi)
print(d2)

ip, port = '00.cr.yp.toc.tf', 13371
io = remote(ip, port)

io.recvuntil('Please provide your desired 1024-bit prime numbers p, q:')
io.sendline(str(p)+','+str(q))
io.recvline()

c1 = int(io.recvline().decode().strip().split(' = ')[-1])
c2 = int(io.recvline().decode().strip().split(' = ')[-1])

print(gcd(c1, p1*q1), gcd(c2, p2*q2))

#print(c1)
#print(c2)

m1 = pow(c1, d1, p1*q1)
m2 = pow(c2, d2, p2*q2)

m = long_to_bytes(m1) + long_to_bytes(m2)
print(m)
io.recvuntil('Now, send us the secret string to get the flag:')
io.sendline(m)
print(io.recvall())

#Try many times...
#CCTF{i_l0v3_5UpeR_S4fE_Pr1m3s!!}
