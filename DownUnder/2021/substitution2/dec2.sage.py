

# This file was *autogenerated* from the file dec2.sage
from sage.all_cmdline import *   # import sage library

_sage_const_0 = Integer(0); _sage_const_1 = Integer(1); _sage_const_2 = Integer(2); _sage_const_3 = Integer(3); _sage_const_4 = Integer(4); _sage_const_5 = Integer(5); _sage_const_6 = Integer(6)
from string import ascii_lowercase, digits, printable
CHARSET = "DUCTF{}_!?'" + ascii_lowercase + digits
n = len(CHARSET)

def encrypt(msg, f):
	ct = ''
	for c in msg:
		ct += CHARSET[f.substitute(CHARSET.index(c))]
	return ct

def decrypt(enc, f):
	subtitution_table = encrypt(CHARSET, f)
	print(subtitution_table)
	return ''.join(CHARSET[subtitution_table.index(c)] for c in enc)

P = PolynomialRing(GF(n), names=('x',)); (x,) = P._first_ngens(1)
enc = open('./output.txt', 'r').read().strip()
print(enc)

X = [_sage_const_0 , _sage_const_1 , _sage_const_2 , _sage_const_3 , _sage_const_4 , _sage_const_5 , _sage_const_6 ]
Y = [CHARSET.index(c) for c in enc[:_sage_const_6 ]] + [CHARSET.index(enc[-_sage_const_1 ])]
points = zip(X,Y)

f = P.lagrange_polynomial(points)
print(f)

FLAG = decrypt(enc,f)
print(FLAG)

