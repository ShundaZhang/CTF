p =  148982911401264734500617017580518449923542719532318121475997727602675813514863
g =  2
y =  99943368625476277151400768907519717344447758596311103260066302523387843692499
data = [
 (82164720827627951718117576622367372918842412631288684063666489980382312886875, 20555462814568596793812771425415543791560033744700837082533238767135),
 (121728190859093179709167853051428045020048650314914045286511335302789797110644, 18832686601255134631820635660734300367214611070497673143677605724980),
 (146082371876690961814167471199278995325899717136850705507399907858041424152875, 17280327447912166881602972638784747375738574870164428834607749483679),
 (70503066417308377066271947367911829721247208157460892633371511382189117698027, 18679076989831101699209257375687089051054511859966345809079812661627),
 (129356717302185231616252962266443899346987025366769583013987552032290057284641, 2084781842220461075274126508657531826108703724816608320266110772897),
 (12183293984655719933097345580162258768878646698567137931824149359927592074910, 15768525934046641405375930988120401106067516205761039338919748323087),
]

ss = [d[0] for d in data]
es = [d[1] for d in data]

def Babai_closest_vector(B, target):
    # Babai's Nearest Plane algorithm
    M = B.LLL()
    G = M.gram_schmidt()[0]
    small = target
    for _ in range(1):
        for i in reversed(range(M.nrows())):
            c = ((small * G[i]) / (G[i] * G[i])).round()
            small -= M[i] * c
    return target - small

B = Matrix(
    [
        [1,0,0,0,(ss[4]-ss[0]), (ss[3]-ss[1])],
        [0,2/(p-1),0,0,(es[4]-es[0]), (es[3]-es[1])],
        [0,0,1/(1<<87),0,1<<96,0],
        [0,0,0,1/(1<<95),0,1<<96],
        [0,0,0,0,p-1,0],
        [0,0,0,0,0,p-1],
    ])

Y = vector([1, 1, -1, -1, 0, 0])
W = Babai_closest_vector(B, Y)
x = W[1] * (p-1) / 2

print(W)
print(x)
print(pow(2,x,p) == y)

