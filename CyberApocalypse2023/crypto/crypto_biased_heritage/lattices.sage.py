

# This file was *autogenerated* from the file lattices.sage
from sage.all_cmdline import *   # import sage library

_sage_const_148982911401264734500617017580518449923542719532318121475997727602675813514863 = Integer(148982911401264734500617017580518449923542719532318121475997727602675813514863); _sage_const_2 = Integer(2); _sage_const_99943368625476277151400768907519717344447758596311103260066302523387843692499 = Integer(99943368625476277151400768907519717344447758596311103260066302523387843692499); _sage_const_82164720827627951718117576622367372918842412631288684063666489980382312886875 = Integer(82164720827627951718117576622367372918842412631288684063666489980382312886875); _sage_const_20555462814568596793812771425415543791560033744700837082533238767135 = Integer(20555462814568596793812771425415543791560033744700837082533238767135); _sage_const_121728190859093179709167853051428045020048650314914045286511335302789797110644 = Integer(121728190859093179709167853051428045020048650314914045286511335302789797110644); _sage_const_18832686601255134631820635660734300367214611070497673143677605724980 = Integer(18832686601255134631820635660734300367214611070497673143677605724980); _sage_const_146082371876690961814167471199278995325899717136850705507399907858041424152875 = Integer(146082371876690961814167471199278995325899717136850705507399907858041424152875); _sage_const_17280327447912166881602972638784747375738574870164428834607749483679 = Integer(17280327447912166881602972638784747375738574870164428834607749483679); _sage_const_70503066417308377066271947367911829721247208157460892633371511382189117698027 = Integer(70503066417308377066271947367911829721247208157460892633371511382189117698027); _sage_const_18679076989831101699209257375687089051054511859966345809079812661627 = Integer(18679076989831101699209257375687089051054511859966345809079812661627); _sage_const_129356717302185231616252962266443899346987025366769583013987552032290057284641 = Integer(129356717302185231616252962266443899346987025366769583013987552032290057284641); _sage_const_2084781842220461075274126508657531826108703724816608320266110772897 = Integer(2084781842220461075274126508657531826108703724816608320266110772897); _sage_const_12183293984655719933097345580162258768878646698567137931824149359927592074910 = Integer(12183293984655719933097345580162258768878646698567137931824149359927592074910); _sage_const_15768525934046641405375930988120401106067516205761039338919748323087 = Integer(15768525934046641405375930988120401106067516205761039338919748323087); _sage_const_0 = Integer(0); _sage_const_1 = Integer(1); _sage_const_4 = Integer(4); _sage_const_3 = Integer(3); _sage_const_87 = Integer(87); _sage_const_96 = Integer(96); _sage_const_95 = Integer(95)
p =  _sage_const_148982911401264734500617017580518449923542719532318121475997727602675813514863 
g =  _sage_const_2 
y =  _sage_const_99943368625476277151400768907519717344447758596311103260066302523387843692499 
data = [
 (_sage_const_82164720827627951718117576622367372918842412631288684063666489980382312886875 , _sage_const_20555462814568596793812771425415543791560033744700837082533238767135 ),
 (_sage_const_121728190859093179709167853051428045020048650314914045286511335302789797110644 , _sage_const_18832686601255134631820635660734300367214611070497673143677605724980 ),
 (_sage_const_146082371876690961814167471199278995325899717136850705507399907858041424152875 , _sage_const_17280327447912166881602972638784747375738574870164428834607749483679 ),
 (_sage_const_70503066417308377066271947367911829721247208157460892633371511382189117698027 , _sage_const_18679076989831101699209257375687089051054511859966345809079812661627 ),
 (_sage_const_129356717302185231616252962266443899346987025366769583013987552032290057284641 , _sage_const_2084781842220461075274126508657531826108703724816608320266110772897 ),
 (_sage_const_12183293984655719933097345580162258768878646698567137931824149359927592074910 , _sage_const_15768525934046641405375930988120401106067516205761039338919748323087 ),
]

ss = [d[_sage_const_0 ] for d in data]
es = [d[_sage_const_1 ] for d in data]

def Babai_closest_vector(B, target):
    # Babai's Nearest Plane algorithm
    M = B.LLL()
    G = M.gram_schmidt()[_sage_const_0 ]
    small = target
    for _ in range(_sage_const_1 ):
        for i in reversed(range(M.nrows())):
            c = ((small * G[i]) / (G[i] * G[i])).round()
            small -= M[i] * c
    return target - small

B = Matrix(
    [
        [_sage_const_1 ,_sage_const_0 ,_sage_const_0 ,_sage_const_0 ,(ss[_sage_const_4 ]-ss[_sage_const_0 ]), (ss[_sage_const_3 ]-ss[_sage_const_1 ])],
        [_sage_const_0 ,_sage_const_2 /(p-_sage_const_1 ),_sage_const_0 ,_sage_const_0 ,(es[_sage_const_4 ]-es[_sage_const_0 ]), (es[_sage_const_3 ]-es[_sage_const_1 ])],
        [_sage_const_0 ,_sage_const_0 ,_sage_const_1 /(_sage_const_1 <<_sage_const_87 ),_sage_const_0 ,_sage_const_1 <<_sage_const_96 ,_sage_const_0 ],
        [_sage_const_0 ,_sage_const_0 ,_sage_const_0 ,_sage_const_1 /(_sage_const_1 <<_sage_const_95 ),_sage_const_0 ,_sage_const_1 <<_sage_const_96 ],
        [_sage_const_0 ,_sage_const_0 ,_sage_const_0 ,_sage_const_0 ,p-_sage_const_1 ,_sage_const_0 ],
        [_sage_const_0 ,_sage_const_0 ,_sage_const_0 ,_sage_const_0 ,_sage_const_0 ,p-_sage_const_1 ],
    ])

Y = vector([_sage_const_1 , _sage_const_1 , -_sage_const_1 , -_sage_const_1 , _sage_const_0 , _sage_const_0 ])
W = Babai_closest_vector(B, Y)
x = W[_sage_const_1 ] * (p-_sage_const_1 ) / _sage_const_2 

print(W)
print(x)
print(pow(_sage_const_2 ,x,p) == y)


