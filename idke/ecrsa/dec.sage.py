

# This file was *autogenerated* from the file dec.sage
from sage.all_cmdline import *   # import sage library

_sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_3 = Integer(3); _sage_const_99193023581616109152177764300040037859521925088272985981669959946817746109531909713425474710564402873765914926441545005839662821744603138460681680285655317684469203777533871394260260583839662628325884473084768835902143240687542429953968760669321064892423877370896609497584167478711224462305776836476437268587 = Integer(99193023581616109152177764300040037859521925088272985981669959946817746109531909713425474710564402873765914926441545005839662821744603138460681680285655317684469203777533871394260260583839662628325884473084768835902143240687542429953968760669321064892423877370896609497584167478711224462305776836476437268587); _sage_const_115076663389968253954821343472300155800654332223208277786605760890770425514748910251950393842983935903563187546008731344369976804796963863865102277460894378910744413097852034635455187460730497479244094103353376650220792908529826147612199680141743585684118885745149209575053969106545841997245139943766220688789 = Integer(115076663389968253954821343472300155800654332223208277786605760890770425514748910251950393842983935903563187546008731344369976804796963863865102277460894378910744413097852034635455187460730497479244094103353376650220792908529826147612199680141743585684118885745149209575053969106545841997245139943766220688789); _sage_const_74232642959425795109854140949498935461683632963630260034964643066394703345139733396470958836932831941672213466233486926122670098721687149917605871805886006479766670309639660332339984667770417687192717160061980507220617662938436637445370463397769213554349920956877041619061811087875024276435043752581073552318 = Integer(74232642959425795109854140949498935461683632963630260034964643066394703345139733396470958836932831941672213466233486926122670098721687149917605871805886006479766670309639660332339984667770417687192717160061980507220617662938436637445370463397769213554349920956877041619061811087875024276435043752581073552318); _sage_const_79615329406682121028641446306520032869660130854153788352536429332441749473394735222836513266191300847548366008281109415002581029448905418880962931523411475044527689429201653146200630804486870653795937020571749192405439450656659472253086567149309166068212312829071678837253421625687772396105149376211148834937 = Integer(79615329406682121028641446306520032869660130854153788352536429332441749473394735222836513266191300847548366008281109415002581029448905418880962931523411475044527689429201653146200630804486870653795937020571749192405439450656659472253086567149309166068212312829071678837253421625687772396105149376211148834937); _sage_const_114576105009077728778286635566905404081211824310970349548035698466418670695753458926421098950418414701335730404414509232776047250916535638430446206810902182305851611221604003509735478943147034397832291215478617613443375140890349118302843641726392253137668650493281241262406250679891685430326869028996183320982 = Integer(114576105009077728778286635566905404081211824310970349548035698466418670695753458926421098950418414701335730404414509232776047250916535638430446206810902182305851611221604003509735478943147034397832291215478617613443375140890349118302843641726392253137668650493281241262406250679891685430326869028996183320982); _sage_const_0 = Integer(0); _sage_const_8 = Integer(8)#https://www.ctfiot.com/93433.html
#https://blog.maple3142.net/2023/01/16/idekCTF-2022-writeups/
#https://github.com/AZ-0/Writeups/tree/main/2022/idek/crypto-ecrsa

import itertools as it

def find_factor(T, m):
	'''Find a factor of T, where m is a multiple of λ(T)'''
	v2m = int(log(m.p_primary_part(_sage_const_2 ), _sage_const_2 ))
	for a in primes(isqrt(T)):
		for k in range(v2m):
			g = gcd(ZZ(pow(a, m//_sage_const_2 **k, T)) - _sage_const_1 , T)
			if g not in { _sage_const_1 , T }:
				return g

	print('Found no factor!')

def factorize(N, m):
	'''Factorize N, where m is a multiple of λ(N)'''
	if is_prime(N):
		return factor(N)

	if N.is_perfect_power():
		A, e = N.perfect_power()
		return factorize(A)**e

	X = find_factor(N, m)
	return factorize(X, m) * factorize(N//X, m)

e = _sage_const_3 
d = _sage_const_99193023581616109152177764300040037859521925088272985981669959946817746109531909713425474710564402873765914926441545005839662821744603138460681680285655317684469203777533871394260260583839662628325884473084768835902143240687542429953968760669321064892423877370896609497584167478711224462305776836476437268587 
C = (_sage_const_115076663389968253954821343472300155800654332223208277786605760890770425514748910251950393842983935903563187546008731344369976804796963863865102277460894378910744413097852034635455187460730497479244094103353376650220792908529826147612199680141743585684118885745149209575053969106545841997245139943766220688789 , _sage_const_74232642959425795109854140949498935461683632963630260034964643066394703345139733396470958836932831941672213466233486926122670098721687149917605871805886006479766670309639660332339984667770417687192717160061980507220617662938436637445370463397769213554349920956877041619061811087875024276435043752581073552318 )
U = (_sage_const_79615329406682121028641446306520032869660130854153788352536429332441749473394735222836513266191300847548366008281109415002581029448905418880962931523411475044527689429201653146200630804486870653795937020571749192405439450656659472253086567149309166068212312829071678837253421625687772396105149376211148834937 , _sage_const_114576105009077728778286635566905404081211824310970349548035698466418670695753458926421098950418414701335730404414509232776047250916535638430446206810902182305851611221604003509735478943147034397832291215478617613443375140890349118302843641726392253137668650493281241262406250679891685430326869028996183320982 )

K = QQ['a']; (a,) = K._first_ngens(1)
f = U[_sage_const_0 ]**_sage_const_3  + a*U[_sage_const_0 ] - U[_sage_const_1 ]**_sage_const_2  + C[_sage_const_1 ]**_sage_const_2  - C[_sage_const_0 ]**_sage_const_3  - a*C[_sage_const_0 ]
a = f.roots()[_sage_const_0 ][_sage_const_0 ]

t = ZZ(int.from_bytes(b'ECRSA offers added security by elliptic entropy.', 'big'))
b = _sage_const_2 **_sage_const_2  - t**_sage_const_3  - t*a
E = EllipticCurve(QQ, [a, b])
T = E(t, _sage_const_2 )

xt3, yt3 = (_sage_const_3 *T).xy()
n = gcd(xt3.numer() - U[_sage_const_0 ]*xt3.denom(), yt3.numer() - U[_sage_const_1 ]*yt3.denom())
print('n =', n)
# Might need to run n through factorDB to remove small factors

fs = factorize(n, e*d - _sage_const_1 )
assert prod(fs) == n

ms = []
for p, _ in fs:
	Ep = EllipticCurve(GF(p), [a, b])
	ms.append([int(M[_sage_const_0 ]) for M in Ep(C).division_points(e)])

(p, _), (q, _) = fs
for mp, mq in it.product(*ms):
	m = CRT([mp, mq], [p, q])
	print(int(m).to_bytes(m.nbits()//_sage_const_8  + _sage_const_1 , 'big'))

