

# This file was *autogenerated* from the file dec.sage
from sage.all_cmdline import *   # import sage library

_sage_const_92896523979616431783569762645945918751162321185159790302085768095763248357146198882641160678623069857011832929179987623492267852304178894461486295864091871341339490870689110279720283415976342208476126414933914026436666789270209690168581379143120688241413470569887426810705898518783625903350928784794371176183 = Integer(92896523979616431783569762645945918751162321185159790302085768095763248357146198882641160678623069857011832929179987623492267852304178894461486295864091871341339490870689110279720283415976342208476126414933914026436666789270209690168581379143120688241413470569887426810705898518783625903350928784794371176183); _sage_const_56164378185049402404287763972280630295410174183649054805947329504892979921131852321281317326306506444145699012788547718091371389698969718830761120076359634262880912417797038049510647237337251037070369278596191506725812511682495575589039521646062521091457438869068866365907962691742604895495670783101319608530 = Integer(56164378185049402404287763972280630295410174183649054805947329504892979921131852321281317326306506444145699012788547718091371389698969718830761120076359634262880912417797038049510647237337251037070369278596191506725812511682495575589039521646062521091457438869068866365907962691742604895495670783101319608530); _sage_const_787673996295376297668171075170955852109814939442242049800811601753001897317556022653997651874897208487913321031340711138331360350633965420642045383644955 = Integer(787673996295376297668171075170955852109814939442242049800811601753001897317556022653997651874897208487913321031340711138331360350633965420642045383644955); _sage_const_1 = Integer(1); _sage_const_4 = Integer(4); _sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_512 = Integer(512); _sage_const_0 = Integer(0); _sage_const_128 = Integer(128); _sage_const_0p4 = RealNumber('0.4')#e*d =  1 mod (p-1)*(q-1)
#3*d = 1 + k*(p-1)*(q-1)
#3*ld*p = p + k*n*p - k*p^2 - k*n + k*p mod 2^512

n = _sage_const_92896523979616431783569762645945918751162321185159790302085768095763248357146198882641160678623069857011832929179987623492267852304178894461486295864091871341339490870689110279720283415976342208476126414933914026436666789270209690168581379143120688241413470569887426810705898518783625903350928784794371176183 

c = _sage_const_56164378185049402404287763972280630295410174183649054805947329504892979921131852321281317326306506444145699012788547718091371389698969718830761120076359634262880912417797038049510647237337251037070369278596191506725812511682495575589039521646062521091457438869068866365907962691742604895495670783101319608530 

ld = _sage_const_787673996295376297668171075170955852109814939442242049800811601753001897317556022653997651874897208487913321031340711138331360350633965420642045383644955 

mp = []


#for k in range(1, 10):
for k in range(_sage_const_1 , _sage_const_4 ):
	p = var('p')
	p0 = solve_mod([_sage_const_3 *p*ld == p + k*(n*p - p**_sage_const_2  - n + p)], _sage_const_2 **_sage_const_512 )
	mp += [int(x[_sage_const_0 ]) for x in p0]

print(mp)

for lp in mp:
	R = PolynomialRing(Zmod(n), names=('x',)); (x,) = R._first_ngens(1)
	p = x*_sage_const_2 **_sage_const_512  + lp
	root = p.monic().small_roots(X = _sage_const_2 **_sage_const_128 , beta = _sage_const_0p4 )
	if root:
		print(root[_sage_const_0 ])
		print(p(root[_sage_const_0 ])


