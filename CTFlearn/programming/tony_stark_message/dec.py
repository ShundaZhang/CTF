#!/usr/bin/python3
import base64
import pickle

hstr = [None]*100

encoded_data

huffman_tree = []

class Node:
	def __init__(self):
		pass

def build_htree(node, i):
	if node == None:
		return
	if node.data != '\x00':
		huffman_tree.append((''.join(hstr[:i]), node.data))

	hstr[i] = '0'
	build_htree(node.left,i+1)
	hstr[i] = '1'
	build_htree(node.right,i+1)

if __name__ == "__main__":

	with open('node_data.txt','rb') as f:
		node = pickle.load(f)
	build_htree(node, 0)
	print(huffman_tree)

	flag=''
	start=''
	for i in encoded_data:
		start += i
		for j in huffman_tree:
			if start == j[0]:
				flag += j[1]
				start = '' #start again
				break

	print(flag)
	#print(base64.b64decode(flag))
	#b'Tony_Stark:_I_Build_Neat_Stuff,_Got_A_Great_Girl,_Occasionally_Save_The_World._So_flag{Why_Can\xe2\x80\x99t_I_Sleep?}'
	#base64 -d
	#Tony_Stark:_I_Build_Neat_Stuff,_Got_A_Great_Girl,_Occasionally_Save_The_World._So_flag{Why_Canâ€™t_I_Sleep?}
