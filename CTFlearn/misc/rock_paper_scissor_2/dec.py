#!/usr/bin/python3.6
#pip3 install mersenne-twister-predictor

'''
https://writeups.noxtal.com/posts/2020-05-19-ctflearn856.html
A Mersenne Twister algorithm needs to be initialized with a seed, a 32-bit value. In the initializing process, the seed is going to be converted to a state: a vector of 624 32-bit values. Every time we need a random number out of this PRNG, we convert the current state into a number using a one-way function (Temper). Then, a new state is generated by “twisting” the current one (the Twist function is also a one-way function).
'''
#R -> 0
#P -> 1
#S -> 2

from pwn import *
from mt19937predictor import MT19937Predictor

win = {
    "R": "P",
    "P": "S",
    "S": "R"
}

io = remote('138.197.193.132',5002)
n = 624
predictor = MT19937Predictor()

for i in range(n):
	io.recvuntil('>>>')
	io.send('R')
	io.recvline()
	buf = io.recvline().decode('ascii')
	rand = int(buf.split('based on ')[1])
	predictor.setrandbits(rand, 32)

	print(i+1,'->',n)

for i in range(30):
	nextrand = predictor.getrandbits(32)
	index = ["R", "P", "S"][nextrand % 3]
	io.recvuntil('>>>')
	io.send(win[index])
	print(io.recvline())
	

print(io.recvrepeat(timeout = 10))
print(io.recvrepeat(timeout = 10))
print(io.recvrepeat(timeout = 10))
print(io.recvrepeat(timeout = 10))
print(io.recvrepeat(timeout = 10))

io.close()
