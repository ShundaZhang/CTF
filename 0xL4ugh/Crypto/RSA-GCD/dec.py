'''
RSA GCD

x = next_prime(y) knowing x, can bf y. As usually the delta of 2 primes should be in 200+ to 2000+, let's say < 10000.

So from eq1, we can konw c1.
Then

(p+5q)^x1 % n == c1
(2p-3q)^x2 % n == c2

(p+5q)^x1 == p^x1 + a1*p^(x1-1)*(5q) + a2*p^(x1-2)*(5q)^2 + ... + (5q)^x1 
And p*q % n == 0
So (p+5q)^x1 % n == ( p^x1 + (5q)^x1 ) % n

p^x1 + (5q)^x1 == k1*n + c1
(2p)^x2 + (-3q)^x2 == k2*n + c2

p^(x1*x2) + (5q)^(x1*x2) == K1*n + c1^x2
(2p)^(x1*x2) + (-3q)^(x1*x2) == K2*n + c2^x1

(10q)^(x1*x2) - (-3q)^(x1*x2) == K*n + 2^(x1*x2)*c1^x2 - c2^x1

2^(x1*x2)*c1^x2 - c2^x1 == (10^(x1*x2)-(-3)^(x1*x2))*q^(x1*x2) - K*p*q
GCD(2^(x1*x2)*c1^x2 - c2^x1, n) == q
'''

x1=281633240040397659252345654576211057861
x2=176308336928924352184372543940536917109
#hint=411
eq1=2215046782468309450936082777612424211412337114444319825829990136530150023421973276679233466961721799435832008176351257758211795258104410574651506816371525399470106295329892650116954910145110061394115128594706653901546850341101164907898346828022518433436756708015867100484886064022613201281974922516001003812543875124931017296069171534425347946706516721158931976668856772032986107756096884279339277577522744896393586820406756687660577611656150151320563864609280700993052969723348256651525099282363827609407754245152456057637748180188320357373038585979521690892103252278817084504770389439547939576161027195745675950581
c2=224716457567805571457452109314840584938194777933567695025383598737742953385932774494061722186466488058963292298731548262946252467708201178039920036687466838646578780171659412046424661511424885847858605733166167243266967519888832320006319574592040964724166606818031851868781293898640006645588451478651078888573257764059329308290191330600751437003945959195015039080555651110109402824088914942521092411739845889504681057496784722485112900862556479793984461508688747584333779913379205326096741063817431486115062002833764884691478125957020515087151797715139500054071639511693796733701302441791646733348130465995741750305
c=11590329449898382355259097288126297723330518724423158499663195432429148659629360772046004567610391586374248766268949395442626129829280485822846914892742999919200424494797999357420039284200041554727864577173539470903740570358887403929574729181050580051531054419822604967970652657582680503568450858145445133903843997167785099694035636639751563864456765279184903793606195210085887908261552418052046078949269345060242959548584449958223195825915868527413527818920779142424249900048576415289642381588131825356703220549540141172856377628272697983038659289548768939062762166728868090528927622873912001462022092096509127650036
n=14478207897963700838626231927254146456438092099321018357600633229947985294943471593095346392445363289100367665921624202726871181236619222731528254291046753377214521099844204178495251951493800962582981218384073953742392905995080971992691440003270383672514914405392107063745075388073134658615835329573872949946915357348899005066190003231102036536377065461296855755685790186655198033248021908662540544378202344400991059576331593290430353385561730605371820149402732270319368867098328023646016284500105286746932167888156663308664771634423721001257809156324013490651392177956201509967182496047787358208600006325742127976151

from Crypto.Util.number import *
from gmpy2 import *

'''
for c1 in range(eq1, eq1-10000, -1):
	q = gcd(pow(2, x1*x2, n)*pow(c1, x2, n) - pow(c2, x1, n), n)
	if q > 1:
		print(q)
		break
'''

q = 99622030507522927271735666834103303832522359573060498989068335242789278465325103785545103897816594347523515551196878710170582246653480199709318964288210307717514969090267733855006018150061461355814364360355472347448893613585520966150648509610088163303326395218402257442573144208980129905892885327340996802261

p = n//q

phi = (p-1)*(q-1)
d = invert(eq1, phi)
m = pow(c, d, n)
print(bytes.fromhex(hex(m)[2:]))

#0xL4ugh{you_know_how_factor_N!}
