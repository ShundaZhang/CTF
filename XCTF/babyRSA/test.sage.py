# coding=utf-8


# This file was *autogenerated* from the file test.sage
from sage.all_cmdline import *   # import sage library

_sage_const_4 = Integer(4); _sage_const_2 = Integer(2); _sage_const_2049 = Integer(2049); _sage_const_256 = Integer(256); _sage_const_16 = Integer(16)#!/usr/bin/env sage

from pubkey import P, n, e
#from secret import flag
from os import urandom

flag='0123456789'*_sage_const_4 

R = GF(_sage_const_2 **_sage_const_2049 , names=('a',)); (a,) = R._first_ngens(1)

def encrypt(m):
    global n
    assert len(m) <= _sage_const_256 
    m_int = Integer(m, _sage_const_16 )
    m_poly = P(R.fetch_int(m_int))
    c_poly = pow(m_poly, e, n)
    #print("n=",R(n).integer_representation())
    #print("e=",e)
    #print(factor(n))
    print(m_poly)
    print(c_poly)
    c_int = R(c_poly).integer_representation()
    #c = format(c_int, '0256x').decode('hex')
    #print(c_int)
    return c_int

if __name__ == '__main__':
    ptext = flag #+ os.urandom(256-len(flag))
    ctext = encrypt(ptext)
    #with open('test.enc', 'wb') as f:
        #f.write(ctext)

